import org.jose4j.jwk.JsonWebKey
import org.jose4j.jwk.OctJwkGenerator

buildscript {
    repositories {
        maven {
            url 'https://infusionsoft.jfrog.io/infusionsoft/mvn-clean'
            credentials {
                username System.properties['externalProxyRepositoryUsername']
                password System.properties['externalProxyRepositoryPassword']
            }
        }
    }
    dependencies {
        classpath "org.bitbucket.b_c:jose4j:0.5.2"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.'springboot.version'}"
        classpath 'com.infusionsoft.pancakes:pancakes-google-cloud-build-plugin:3.+'
    }
}

allprojects {
    group 'com.infusionsoft'
    apply plugin: 'pancakes-library'
}

subprojects {
    apply plugin: 'pancakes-library'
    task allDependenciesInsight(type: DependencyInsightReportTask, description: "Produce insight information for all dependencies") << {}
    task allDependencies(type: DependencyReportTask, description: "Display a graph of all project dependencies") {}
}

task wrapper(type: Wrapper, description: "Update the Gradle wrapper") {
    gradleVersion = project."gradle.version"
}

task generateKeys {
    group = 'CAS'
    description = 'generate keys for CAS. These keys can be added to your application.properties file'
    doLast {
        println 'Generating keys for CAS...'
        [
                'cas.authn.pm.reset.security.encryptionKey': 256,
                'cas.authn.pm.reset.security.signingKey'   : 512,
                'cas.authn.token.crypto.encryption.key'    : 256,
                'cas.authn.token.crypto.signing.key'       : 512,
                'cas.tgc.encryptionKey'                    : 256,
                'cas.tgc.signingKey'                       : 512,
                'cas.webflow.encryption.key'               : 96,
                'cas.webflow.signing.key'                  : 512
        ].each { key, size ->
            def octetKey = OctJwkGenerator.generateJwk(size)
            def params = octetKey.toParams(JsonWebKey.OutputControlLevel.INCLUDE_SYMMETRIC)
            println "${key}=${params.get('k')}"
        }
    }
}
