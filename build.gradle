import org.jose4j.jwk.JsonWebKey
import org.jose4j.jwk.OctJwkGenerator

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.bitbucket.b_c:jose4j:0.5.6"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.'springboot.version'}"
    }
}

subprojects {
    task allDependenciesInsight(type: DependencyInsightReportTask, description: "Produce insight information for all dependencies") {}
    task allDependencies(type: DependencyReportTask, description: "Display a graph of all project dependencies") {}
}

task wrapper(type: Wrapper, description: "Update the Gradle wrapper") {
    gradleVersion = project."gradle.version"
}

task generateKeys {
  group = 'CAS'
  description = 'Generate keys for CAS. These keys can be added to your cas.properties file'
  doLast {
    println 'Generating keys for CAS...'
    ['cas.tgc.encryptionKey': 256, 'cas.tgc.signingKey': 512, 'cas.webflow.encryption.key': 96, 'cas.webflow.signing.key': 512].each { key, size ->
        def octetKey = OctJwkGenerator.generateJwk(size)
        def params = octetKey.toParams(JsonWebKey.OutputControlLevel.INCLUDE_SYMMETRIC)
        println "${key}=${params.get('k')}"
    }
  }
}

task command (type: JavaExec) {
  group = 'CAS'
  description = "Invokes the CAS Command Line Shell. Use -q to quiet Gradle output. To pass arguments, use '-Pcargs=arg1,arg2,arg3,...'"
  main='-jar'
  standardInput = System.in
  if (project.hasProperty("cas.version")) {
      def casVersion = project.getProperty("cas.version")
      def commandFilePath = System.getProperty("user.dir") + File.separator + "cas" + File.separator + "build" + File.separator + "cas-server-support-shell-${casVersion}.jar"
      def commandFile = new File(commandFilePath)
      if (!commandFile.exists()) {
          new URL("http://repo1.maven.org/maven2/org/apereo/cas/cas-server-support-shell/${casVersion}/cas-server-support-shell-${casVersion}.jar").withInputStream{ i -> commandFile.withOutputStream{ it << i }}
      }
      def args2 = [commandFile]
      if (project.hasProperty('cargs')) {
          args2.addAll(cargs.trim().split(','))
      }
      args = args2
  }
}
