apply plugin: 'org.springframework.boot'
apply from: 'http://dl.bintray.com/scalding/generic/waroverlay.gradle'
apply from: 'https://raw.githubusercontent.com/apereo/cas/5.1.x/gradle/overrides.gradle'

apply plugin: 'eclipse'
apply plugin: 'idea'

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

bootRepackage {
    enabled = false
}

springBoot {
    mainClass = "org.springframework.boot.loader.WarLauncher"
    buildInfo()
}

bootRun {
    addResources = true
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
}

dependencies {
    compile "com.googlecode.json-simple:json-simple:${project.'json.simple.version'}"
    compile "io.dropwizard.metrics:metrics-core:${project.'dropwizard-metrics.version'}"
    compile "io.dropwizard.metrics:metrics-graphite:${project.'dropwizard-metrics.version'}"
    compile "org.apereo.cas:cas-server-webapp-config:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-webapp-init:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-webapp-tomcat:${project.'cas.version'}@war"
    compile "org.apereo.cas:cas-server-core-audit:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-core-authentication:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-core-configuration:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-core-services:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-core-tickets:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-cookie:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-hazelcast-monitor:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-hazelcast-ticket-registry:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-jdbc-drivers:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-jdbc-monitor:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-pac4j-webflow:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-pm:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-rest:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-themes:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-token:${project.'cas.version'}"
    compile "org.jadira.usertype:usertype.core:${project.'jadira.version'}"
    compile "org.jsoup:jsoup:${project.'jsoup.version'}"
    compile "org.springframework:spring-core:${project.'spring.version'}"
    compile "org.springframework.data:spring-data-commons:${project.'springDataCommons.version'}"
    compile "org.springframework.data:spring-data-jpa:${project.'springDataJpa.version'}"

    providedCompile "javax.servlet:javax.servlet-api:3.1.0"

    runtime "mysql:mysql-connector-java:${project.'mysql.version'}"

    testCompile "org.mockito:mockito-core:1.10.19"
}

processResources {
//    from('src/main/java') {
//        include '**/*.properties'
//        expand(project.properties)
//    }
}

task copyConfig(type: Copy) {
    println "Copying configuration to /etc/cas/config"
    from "${project.rootDir}/etc/cas/config"
    into '/etc/cas/config'
}

war {
//    dependsOn copyConfig
    baseName 'cas'
    archiveName 'cas.war'
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED
    manifest {
        from manifestFile()
    }
}

task explodeWar(type: Copy) {
    group = "build"
    description = "Explode the cas.war"
    from zipTree(project.war.outputs.files.singleFile)
    into "${buildDir}/cas"
    doLast {
        println "CAS web application artifact exploded into [cas/build/cas]"
    }
}

File manifestFile() {
    def warfile = configurations.runtime.asFileTree.matching {
        include '**/*.war'
    }
    def manifest = zipTree(warfile.singleFile).matching {
        include '**/*.MF'
    }
    def dst = new File("${project.rootDir}/etc/cas/MANIFEST.MF")
    dst.delete()
    dst << manifest.singleFile.text
    return dst
}

task run {
    dependsOn build
    doLast {
        javaexec {
            main = "-jar";
            jvmArgs = [
                    "-Xmx2048M"
            ]
            args = [
                    "build/libs/cas.war"
            ]
        }
    }
}

task debug {
    dependsOn build
    doLast {
        javaexec {
            main = "-jar";
            jvmArgs = [
                    "-Xmx2048M",
                    "-XX:+TieredCompilation",
                    "-XX:TieredStopAtLevel=1",
                    "-Xdebug",
                    "-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"
            ]
            args = [
                    "build/libs/cas.war",
            ]

            println "Started ${commandLine}"
        }
    }
}