apply plugin: 'spring-boot'
apply from: 'http://dl.bintray.com/scalding/generic/waroverlay.gradle'

/*
This list needs to match the dependency versions
that are overridden by the CAS server directly.
The spring-boot plugin automatically applies the
Dependency Management Plugin and configures in to
import the "spring-boot-starter-parent" bom.
There is currently no way to disable that behavior.
The versions need to be consulted and updated always
to match what the CAS server provides.
 */
ext["hibernate.version"] = "$hibernateVersion"
ext["hazelcast.version"] = "$hazelcastVersion"
ext["spring-session.version"] = "$springSessionVersion"
ext["tomcat.version"] = "$springBootTomcatVersion"
ext["infinispan.version"] = "$infinispanVersion"
ext["spring.version"] = "$springVersion"
ext["jackson.version"] = "$jacksonDatabindVersion"
ext["thymeleaf.version"] = "$thymeleafVersion"
ext["thymeleaf-layout-dialect.version"] = "$thymeleafDialectVersion"

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
}

dependencies {
    compile "org.apereo.cas:cas-server-webapp:${project.'cas.version'}@war"

}

task copyConfig(type: Copy) {
    println "Copying configuration to /etc/cas/config"
    from "${project.rootDir}/etc/cas/config"
    into '/etc/cas/config'
}

war {
    dependsOn copyConfig

    baseName 'cas'
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED
    manifest {
        from manifestFile()
    }
}

task explodeWar(type: Copy) {
    group = "build"
    description = "Explode the cas.war"
    from zipTree(project.war.outputs.files.singleFile)
    into "${buildDir}/cas"
}

bootRepackage {
    enabled = false
}

springBoot  {
    mainClass = "org.springframework.boot.loader.WarLauncher"
}

bootRun {
    addResources = true
}


File manifestFile() {
    def warfile = configurations.runtime.asFileTree.matching {
        include '**/*.war'
    }
    def manifest = zipTree(warfile.singleFile).matching {
        include '**/*.MF'
    }
    def dst = new File("${project.rootDir}/etc/cas/MANIFEST.MF")
    dst.delete()
    dst << manifest.singleFile.text
    return dst
}
