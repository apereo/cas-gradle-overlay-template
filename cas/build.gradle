apply plugin: 'org.springframework.boot'
apply from: 'http://dl.bintray.com/scalding/generic/waroverlay.gradle'
apply from: 'https://raw.githubusercontent.com/apereo/cas/5.0.x/gradle/overrides.gradle'

bootRepackage {
    enabled = false
}

springBoot  {
    mainClass = "org.springframework.boot.loader.WarLauncher"
}

bootRun {
    addResources = true
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
}

dependencies {
    compile "com.googlecode.json-simple:json-simple:${project.'json.simple.version'}"
    compile "org.jsoup:jsoup:${project.'jsoup.version'}"
    compile "org.apereo.cas:cas-server-webapp:${project.'cas.version'}@war"
    compile "org.apereo.cas:cas-server-webapp-config:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-webapp-init:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-core-authentication:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-core-configuration:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-core-services:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-core-tickets:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-cookie:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-jdbc-drivers:${project.'cas.version'}"
//    compile "org.springframework.boot:spring-boot-starter-velocity:${project.'springboot.version'}"
    compile "org.apache.velocity:velocity"
    compile "org.apache.velocity:velocity-tools"
    compile "org.springframework.data:spring-data-commons:${project.'springDataCommons.version'}"
    compile "org.springframework.data:spring-data-jpa:${project.'springDataJpa.version'}"
    compile "org.jadira.usertype:usertype.core:${project.'jadira.version'}"
}

task copyConfig(type: Copy) {
    println "Copying configuration to /etc/cas/config"
    from "${project.rootDir}/etc/cas/config"
    into 'c:/etc/cas/config'
}

war {
    dependsOn copyConfig
    baseName 'cas'
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED
    manifest {
        from manifestFile()
    }
}

task explodeWar(type: Copy) {
    group = "build"
    description = "Explode the cas.war"
    from zipTree(project.war.outputs.files.singleFile)
    into "${buildDir}/cas"
}

File manifestFile() {
    def warfile = configurations.runtime.asFileTree.matching {
        include '**/*.war'
    }
    def manifest = zipTree(warfile.singleFile).matching {
        include '**/*.MF'
    }
    def dst = new File("${project.rootDir}/etc/cas/MANIFEST.MF")
    dst.delete()
    dst << manifest.singleFile.text
    return dst
}

task generateKeys {
  group = 'CAS'
  description = 'generate keys for CAS. These keys can be added to your application.properties file'
  doLast {
    println 'Generating keys for CAS...'
    ['cas.tgc.encryptionKey': 256, 'cas.tgc.signingKey': 512, 'cas.webflow.encryption.key': 96, 'cas.webflow.signing.key': 512].each { key, size ->
        def octetKey = OctJwkGenerator.generateJwk(size)
        def params = octetKey.toParams(JsonWebKey.OutputControlLevel.INCLUDE_SYMMETRIC)
        println "${key}=${params.get('k')}"
    }
  }
}
