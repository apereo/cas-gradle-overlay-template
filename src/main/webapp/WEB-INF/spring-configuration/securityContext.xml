<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <description>
        Security configuration for services management and other sensitive areas of CAS.
        In most cases it should not be necessary to edit this file as common configuration
        can be managed by setting properties in the cas.properties file.
    </description>

    <!-- As of Spring SEC 3.1 -->
    <sec:http pattern="/app/registration/getLogoImageUrl*" security="none"/>
    <sec:http pattern="/rest/**" security="none"/>
    <sec:http pattern="/app/rest/**" security="none"/>

    <sec:http pattern="/status/**" entry-point-ref="notAuthorizedEntryPoint" use-expressions="true" auto-config="true">
        <sec:intercept-url pattern="/status" access="hasIpAddress('${cas.securityContext.status.allowedSubnet}')"/>
    </sec:http>

    <sec:http entry-point-ref="casProcessingFilterEntryPoint" auto-config="true" use-expressions="true">
        <sec:logout success-handler-ref="infusionsoftLogoutSuccessHandler"/>
        <sec:custom-filter ref="casProcessingFilter" after="CAS_FILTER"/>
        <sec:intercept-url pattern="/app/registration/**" access="permitAll()"/>
        <sec:intercept-url pattern="/registration/**" access="permitAll()"/>
        <!--<sec:intercept-url pattern="/rest/**" access="permitAll()"/>-->

        <sec:intercept-url pattern="/app/**" access="isAuthenticated()"/>
        <sec:intercept-url pattern="/services/**" access="denyAll()"/>
        <!--<sec:intercept-url pattern="/services/**" access="hasRole('${cas.securityContext.serviceProperties.adminRoles}')"/>-->
    </sec:http>

    <sec:authentication-manager alias="casAuthenticationManager">
        <sec:authentication-provider ref="casAuthenticationProvider"/>
    </sec:authentication-manager>

    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties"
          p:service="${cas.securityContext.serviceProperties.service}"
          p:sendRenew="false"/>

    <bean id="casProcessingFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter"
          p:authenticationManager-ref="casAuthenticationManager"
          p:filterProcessesUrl="/j_acegi_cas_security_check">
        <property name="authenticationSuccessHandler">
            <bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler"
                  p:alwaysUseDefaultTargetUrl="false"
                  p:defaultTargetUrl="/app/central/home"/>
        </property>
        <property name="authenticationFailureHandler">
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <constructor-arg index="0" value="/authorizationFailure.html"/>
            </bean>
        </property>
    </bean>

    <bean id="casProcessingFilterEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
          p:loginUrl="${cas.securityContext.casProcessingFilterEntryPoint.loginUrl}"
          p:serviceProperties-ref="serviceProperties"/>

    <bean id="notAuthorizedEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>

    <bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
          p:key="my_password_for_this_auth_provider_only"
          p:serviceProperties-ref="serviceProperties"
          p:authenticationUserDetailsService-ref="casUserDetailsService">
        <property name="ticketValidator">
            <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <constructor-arg index="0" value="${cas.securityContext.ticketValidator.casServerUrlPrefix}"/>
            </bean>
        </property>
    </bean>


    <!--<sec:http entry-point-ref="casProcessingFilterEntryPoint" auto-config="true" use-expressions="true">-->
    <!--<sec:logout logout-url="/services/logout.html" logout-success-url="/services/loggedOut.html"/>-->
    <!--<sec:custom-filter ref="casProcessingFilter" after="CAS_FILTER"/>-->
    <!--<sec:intercept-url pattern="/*" access="hasRole('ROLE_USER')"/>-->
    <!--<sec:intercept-url pattern="/app/**" access="hasRole('ROLE_USER')"/>-->
    <!--<sec:intercept-url pattern="/services/**" access="${cas.securityContext.serviceProperties.adminRoles}"/>-->
    <!--&lt;!&ndash;<sec:intercept-url pattern="/central/**" access="isAuthenticated()"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<sec:intercept-url pattern="/oauth/**" access="isAuthenticated()"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<sec:intercept-url pattern="/registration/verification" access="isAuthenticated()"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<sec:intercept-url pattern="/registration/verify" access="isAuthenticated()"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<sec:intercept-url pattern="/registration/success" access="isAuthenticated()"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<sec:intercept-url pattern="/**" access="${cas.securityContext.serviceProperties.adminRoles}"/>&ndash;&gt;-->
    <!--</sec:http>-->


    <bean id="passwordEncoder" class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder">
        <constructor-arg index="0" value="SHA-256"/>
    </bean>


    <!--<sec:user-service id="userDetailsService">-->
    <!--<sec:user name="bradb@infusionsoft.com" password="notused" authorities="ROLE_USER" />-->
    <!--</sec:user-service>-->

    <!--<bean id="userDetailsService" class="com.infusionsoft.cas.services.CasUserDetailsService">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="usersByUsernameQuery" value="select username, password_encoded, enabled from user join user_password on user.id = user_password.user_id where active = 1 and username = ?"/>-->
        <!--<property name="authoritiesByUsernameQuery" value="select user.username, role.authority from user_role join user on user.id = user_role.user_id join role on role.id = user_role.role_id where user.username = ?"/>-->
    <!--</bean>-->

</beans>
