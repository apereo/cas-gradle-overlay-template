<?xml version="1.0" encoding="UTF-8"?>
<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  
	| The beans declared in this file are instantiated at context initialization time by the Spring 
	| ContextLoaderListener declared in web.xml.  It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
	| one implementing your approach for authenticating usernames and passwords.
	+-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <import resource="spring-configuration/propertyFileConfigurer.xml"/>

    <bean id="authenticationManager" class="org.jasig.cas.authentication.AuthenticationManagerImpl">
        <!--
              | This is the List of CredentialToPrincipalResolvers that identify what Principal is trying to authenticate.
              | The AuthenticationManagerImpl considers them in order, finding a CredentialToPrincipalResolver which
              | supports the presented credentials.
              |
              | AuthenticationManagerImpl uses these resolvers for two purposes.  First, it uses them to identify the Principal
              | attempting to authenticate to CAS /login .  In the default configuration, it is the DefaultCredentialsToPrincipalResolver
              | that fills this role.  If you are using some other kind of credentials than UsernamePasswordCredentials, you will need to replace
              | DefaultCredentialsToPrincipalResolver with a CredentialsToPrincipalResolver that supports the credentials you are
              | using.
              |
              | Second, AuthenticationManagerImpl uses these resolvers to identify a service requesting a proxy granting ticket.
              | In the default configuration, it is the HttpBasedServiceCredentialsToPrincipalResolver that serves this purpose.
              | You will need to change this list if you are identifying services by something more or other than their callback URL.
              +-->
        <property name="credentialsToPrincipalResolvers">
            <list>
                <!--
                        | UsernamePasswordCredentialsToPrincipalResolver supports the UsernamePasswordCredentials that we use for /login
                        | by default and produces SimplePrincipal instances conveying the username from the credentials.
                        |
                        | If you've changed your LoginFormAction to use credentials other than UsernamePasswordCredentials then you will also
                        | need to change this bean declaration (or add additional declarations) to declare a CredentialsToPrincipalResolver that supports the
                        | Credentials you are using.
                        +-->
                <!--
                <bean class="com.infusionsoft.cas.auth.InfusionsoftCredentialsToPrincipalResolver">

                </bean>
                -->

                <bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver">
                    <property name="attributeRepository" ref="attributeRepository"/>
                </bean>

                <!--
                        | HttpBasedServiceCredentialsToPrincipalResolver supports HttpBasedCredentials.  It supports the CAS 2.0 approach of
                        | authenticating services by SSL callback, extracting the callback URL from the Credentials and representing it as a
                        | SimpleService identified by that callback URL.
                        |
                        | If you are representing services by something more or other than an HTTPS URL whereat they are able to
                        | receive a proxy callback, you will need to change this bean declaration (or add additional declarations).
                        +-->
                <bean class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver"/>
            </list>
        </property>

        <!--
              | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate,
              | AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
              | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
              | until it finds one that both supports the Credentials presented and succeeds in authenticating.
              +-->
        <property name="authenticationHandlers">
            <list>
                <!-- Authenticates services via an SSL callback. -->
                <bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
                      p:httpClient-ref="httpClient">
                    <property name="requireSecure" value="false"/>
                </bean>

                <!-- Authenticates a username and password. -->
                <bean class="com.infusionsoft.cas.auth.InfusionsoftAuthenticationHandler">
                    <property name="hibernateTemplate" ref="hibernateTemplate"/>
                    <property name="passwordEncoder" ref="passwordEncoder"/>
                </bean>
            </list>
        </property>

        <!-- For "remember me" functionality. -->
        <property name="authenticationMetaDataPopulators">
            <list>
                <bean class="org.jasig.cas.authentication.principal.RememberMeAuthenticationMetaDataPopulator"/>
            </list>
        </property>
    </bean>


    <!--
     This bean defines the security roles for the Services Management application.  Simple deployments can use the in-memory version.
     More robust deployments will want to use another option, such as the Jdbc version.

     The name of this should remain "userDetailsService" in order for Spring Security to find it.
      -->
    <!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" />-->

    <sec:user-service id="userDetailsService">
        <sec:user name="andy.hawkes@infusionsoft.com" password="notused" authorities="ROLE_ADMIN"/>
        <sec:user name="juan.trujillo@infusionsoft.com" password="notused" authorities="ROLE_ADMIN"/>
    </sec:user-service>

    <bean id="passwordEncoder" class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder">
        <constructor-arg index="0" value="SHA-256"/>
    </bean>

    <bean id="attributeRepository" class="com.infusionsoft.cas.support.InfusionsoftAttributeDao">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
    </bean>

    <bean id="serviceRegistryDao" class="org.jasig.cas.services.JpaServiceRegistryDaoImpl"
          p:entityManagerFactory-ref="entityManagerFactory"/>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="true"/>
                <property name="showSql" value="false"/>
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/cas"/>
        <property name="resourceRef" value="true"/>
    </bean>

    <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager"/>

    <bean id="hibernateDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/cas"/>
        <property name="resourceRef" value="true"/>
    </bean>

    <bean id="hibernateSessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="hibernateDataSource"/>
        <property name="annotatedClasses">
            <list>
                <value>com.infusionsoft.cas.types.User</value>
                <value>com.infusionsoft.cas.types.UserAccount</value>
                <value>com.infusionsoft.cas.types.UserPassword</value>
                <value>com.infusionsoft.cas.types.PendingUserAccount</value>
                <value>com.infusionsoft.cas.types.CommunityAccountDetails</value>
                <value>com.infusionsoft.cas.types.LegacyAccount</value>
                <value>com.infusionsoft.cas.types.MigratedApp</value>
                <value>com.infusionsoft.cas.types.LoginAttempt</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="hibernateSessionFactory"/>
    </bean>

    <bean id="hibernateTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="hibernateSessionFactory"/>
    </bean>

    <bean id="infusionsoftAuthenticationService" class="com.infusionsoft.cas.services.InfusionsoftAuthenticationService">
        <property name="centralAuthenticationService" ref="centralAuthenticationService"/>
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="ticketRegistry" ref="ticketRegistry"/>
        <property name="serverPrefix" value="${server.prefix}"/>
        <property name="crmDomain" value="${infusionsoft.crm.domain}"/>
        <property name="crmProtocol" value="${infusionsoft.crm.protocol}"/>
        <property name="crmPort" value="${infusionsoft.crm.port}"/>
        <property name="marketplaceDomain" value="${infusionsoft.marketplace.domain}"/>
        <property name="marketplaceLoginUrl" value="${infusionsoft.marketplace.loginurl}"/>
        <property name="communityDomain" value="${infusionsoft.community.domain}"/>
        <property name="customerHubDomain" value="${infusionsoft.customerhub.domain}"/>
        <property name="migrationDateString" value="${infusionsoft.migration.date}"/>
        <property name="crmService" ref="crmService"/>
        <property name="communityService" ref="communityService"/>
        <property name="customerHubService" ref="customerHubService"/>
        <property name="ticketGrantingTicketCookieGenerator" ref="ticketGrantingTicketCookieGenerator"/>
        <property name="warnCookieGenerator" ref="warnCookieGenerator"/>
    </bean>

    <bean id="infusionsoftPasswordService" class="com.infusionsoft.cas.services.PasswordService">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
    </bean>

    <bean id="infusionsoftDataService" class="com.infusionsoft.cas.services.InfusionsoftDataService">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
    </bean>

    <bean id="mailService" class="com.infusionsoft.cas.services.MailService">
        <property name="mailSender" ref="mailSender"/>
        <property name="serverPrefix" value="${server.prefix}"/>
        <property name="velocityEngine" ref="velocityEngine"/>
    </bean>

    <bean id="crmService" class="com.infusionsoft.cas.services.CrmService">
        <property name="crmProtocol" value="${infusionsoft.crm.protocol}"/>
        <property name="crmDomain" value="${infusionsoft.crm.domain}"/>
        <property name="crmPort" value="${infusionsoft.crm.port}"/>
        <property name="crmVendorKey" value="${infusionsoft.crm.vendorkey}"/>
   </bean>

    <bean id="communityService" class="com.infusionsoft.cas.services.CommunityService">
        <property name="infusionsoftDataService" ref="infusionsoftDataService"/>
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="communityBaseUrl" value="${infusionsoft.community.baseurl}"/>
        <property name="communityApiKey" value="${infusionsoft.community.apikey}"/>
    </bean>

    <bean id="customerHubService" class="com.infusionsoft.cas.services.CustomerHubService">
        <property name="customerHubDomain" value="${infusionsoft.customerhub.domain}"/>
        <property name="customerHubApiUsername" value="${infusionsoft.customerhub.api.username}"/>
        <property name="customerHubApiPassword" value="${infusionsoft.customerhub.api.password}"/>
        <property name="customerHubProtocol" value="${infusionsoft.customerhub.protocol}"/>
        <property name="customerHubPort" value="${infusionsoft.customerhub.port}"/>
    </bean>

    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <props>
                <prop key="resource.loader">classpath</prop>
                <prop key="classpath.resource.loader.class">org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader</prop>
            </props>
        </property>
    </bean>

    <bean id="userFilter" name="userFilter" class="com.infusionsoft.cas.web.UserFilter"
          p:infusionsoftAuthenticationService-ref="infusionsoftAuthenticationService"/>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${infusionsoft.mail.host}"/>
    </bean>

    <bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="info@infusionsoft.com"/>
        <property name="subject" value="Important message from Infusionsoft"/>
    </bean>

	<bean id="garbageMan" class="com.infusionsoft.cas.support.GarbageMan"
          p:hibernateTemplate-ref="hibernateTemplate"
          p:loginAttemptMaxAge="86400000"/>
	
	<bean id="jobDetailGarbageMan" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="garbageMan"
		p:targetMethod="cleanup" />
	
	<bean id="triggerJobDetailGarbageMan" class="org.springframework.scheduling.quartz.SimpleTriggerBean"
		p:jobDetail-ref="jobDetailGarbageMan"
		p:startDelay="1800000"
		p:repeatInterval="1800000" />

    <tx:advice id="transactionAdvice" transaction-manager="hibernateTransactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!--
        <aop:pointcut id="fooServiceOperation" expression="execution(* x.y.service.FooService.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="fooServiceOperation"/>
        -->
    </aop:config>
</beans>
